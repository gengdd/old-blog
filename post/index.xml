<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | GDD</title>
    <link>https://gengdd.github.io/post/</link>
      <atom:link href="https://gengdd.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Fri, 06 Aug 2021 22:00:16 +0800</lastBuildDate>
    <image>
      <url>https://gengdd.github.io/media/icon_hu4b9c718166280bb42d9325f20dee7c58_11030_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>https://gengdd.github.io/post/</link>
    </image>
    
    <item>
      <title>基于骨架数据的时空Inception图卷积动作识别</title>
      <link>https://gengdd.github.io/post/%E5%9F%BA%E4%BA%8E%E9%AA%A8%E6%9E%B6%E6%95%B0%E6%8D%AE%E7%9A%84%E6%97%B6%E7%A9%BAinception%E5%9B%BE%E5%8D%B7%E7%A7%AF%E5%8A%A8%E4%BD%9C%E8%AF%86%E5%88%AB/</link>
      <pubDate>Fri, 06 Aug 2021 22:00:16 +0800</pubDate>
      <guid>https://gengdd.github.io/post/%E5%9F%BA%E4%BA%8E%E9%AA%A8%E6%9E%B6%E6%95%B0%E6%8D%AE%E7%9A%84%E6%97%B6%E7%A9%BAinception%E5%9B%BE%E5%8D%B7%E7%A7%AF%E5%8A%A8%E4%BD%9C%E8%AF%86%E5%88%AB/</guid>
      <description>&lt;center&gt;&lt;div style=&#34;font-size:20pt&#34;&gt;Spatio-Temporal Inception Graph Convolutional Networks for Skeleton-Based Action Recognition&lt;/div&gt;&lt;/center&gt;
&lt;div&gt;
&lt;div style=&#34;width:60px;float:left; font-family:方正公文黑体;&#34;&gt;摘要:&lt;/div&gt; 
&lt;div style=&#34;overflow:hidden; font-family:华文楷体;&#34;&gt;随着深度传感器的普及，基于骨架的人体动作识别引起了广泛关注。最近，图卷积网络(GCN)由于其强大的图形数据建模能力而被广泛用于这项任务。邻接图的拓扑结构是建模输入骨架相关性的关键因素。因此，以前的方法主要关注于图拓扑的设计/学习。但一旦拓扑结构被学习，网络的每一层中只存在一个单一的尺度特征和一个变换。许多在卷积神经网络(CNN)中被证明非常有效的见解，如多尺度信息和多组变换，尚未在GCN中进行研究。原因是由于图形结构的骨架数据与传统的图像/视频数据之间的差距，将这些见解嵌入GCN非常具有挑战性。为了克服这一差距，我们在GCNs中重新设计了用于骨架序列处理的split-transform-merge策略。具体来说，我们设计了一个简单且高度模块化的图形卷积网络架构，用于基于骨架的动作识别。我们的网络是通过重复一个模型块来构建的，该模型块聚集了来自空间和时间路径的多粒度信息。大量的实验表明，我们的网络性能优于最先进的方法，只需1/5的参数和1/10的FLOPs，就有显著的优势。&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;introduction&#34;&gt;INTRODUCTION&lt;/h2&gt;
&lt;p&gt;人类行为识别因其潜在的应用前景而受到广泛关注。近年来，基于骨架的动作识别得到了广泛的研究，因为骨架数据传递了人体运动的紧凑信息，并且对动态环境（如视点变化、遮挡和复杂背景）具有很强的适应性。由于骨架数据自然位于非欧几里德空间，关节作为顶点，它们在人体内的连接作为边缘，因此基于CNN和RNN的方法无法充分利用骨架数据的图形结构中传递的丰富信息。&lt;/p&gt;
&lt;p&gt;最近，图卷积网络以其处理图形数据的优越能力被引入基于骨架的动作识别，并取得了最先进的性能。这些方法大多侧重于图拓扑的设计/学习。那些基于GCN的backbone在从不同尺度提取和合成信息以及从不同层次的不同路径进行转换方面存在固有的局限性。&lt;/p&gt;
&lt;p&gt;直观地说，CNN设计理念中的许多见解可以集成到基于GCN的主干网络中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入可以通过一些低维嵌入或标识映射（GoogLeNet、ResNeXt、ResNet）分成不同的路径&lt;/li&gt;
&lt;li&gt;每个路径可以应用不同的transformations（GoogLeNet，ResNeXt）&lt;/li&gt;
&lt;li&gt;所有路径的输出都可以通过串联或求和进行聚合（ResNet、ResNeXt、GoogLeNet、DenseNet）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而，由于骨架数据的图结构，将这些理念嵌入GCN非常具有挑战性。例如，对于多尺度空间处理，不需要在CNN中使用多个内核大小，GCN需要针对不同阶跃点连接的定制操作。对于多视图时间处理（位置和运动），仍然不涉及为骨架序列图卷积的运动特征。事实上，许多生物学研究表明，灵长类视觉系统中20%的细胞对动态运动变化有反应，但对空间细节不敏感。&lt;/p&gt;
&lt;p&gt;在本文中，我们采用了CNN中的重复层策略，并重新设计了GCN中的分割-变换-合并策略，用于每一层的空间和时间骨架序列处理。对于每一层，输入分为三条路径：空间路径用于空间特征，时间路径用于序列特征和残差连接用于从用输入特征。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gt0geyk4s6j30ff07mmxd.jpg&#34; alt=&#34;image-20210731212911027&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gt0gf2u0gzj30ig09q74y.jpg&#34; alt=&#34;image-20210731212925742&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;空间路径（空间Inception）进一步分为四个分支。我们使用1-4阶邻接采样作为带1-4跳连接的图变换集。然后使用1×1卷积、批归一化和ReLU的特定图形变换。时间路径（时间Inception）由两组变换组成。一组是连续帧中相同关节位置特征的直接图卷积，另一组是连续帧中相同关节运动特征的图卷积。值得注意的是，这是首次将关节的运动特征用于基于骨架的动作识别。最后，在合并阶段，首先对空间路径和时间路径的输出进行级联，并使用1×1卷积进行融合。然后，三条路径的特征通过求和进行聚合。整个块因其与CNN中的Inception模块相似而被命名为时空Inception模块。&lt;/p&gt;
&lt;p&gt;为了验证我们提出的时空Inception图卷积网络（STIGCN）用于基于骨架的动作识别的优越性，在两个大规模数据集上进行了大量实验。我们的网络比最先进的方法有很大的优势，只有1/5的参数和1/10的FLOPs。此外，虽然其他方法依赖于双流管道，需要骨架数据和精心制作的骨骼数据作为输入，但我们的方法只需要原始骨架数据作为输入。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们提出了一种用于基于骨架的动作识别的图卷积主干结构，称为时空Inception图卷积网络。该网络克服了方法在从不同层次的不同路径提取和合成不同规模和转换信息方面的局限性&lt;/li&gt;
&lt;li&gt;为了克服CNN和GCN之间卷积运算的差距，我们在GCN中重新设计了用于骨架序列处理的分割变换合并策略&lt;/li&gt;
&lt;li&gt;我们的方法表明增加变换集的数量比简单地创建更宽的GCN更有效地获得精度。我们希望这一见解将有助于时空序列分析中基于GCN的主干的迭代&lt;/li&gt;
&lt;li&gt;在两个用于基于骨架的动作识别的大规模数据集上，所提出的网络比最先进的方法具有显著的优势，参数和FLOPs更少。将发布代码和预训练模型，以促进未来的相关研究。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;related-work&#34;&gt;RELATED WORK&lt;/h2&gt;
&lt;h3 id=&#34;skeleton-based-action-recognition&#34;&gt;Skeleton-Based Action Recognition&lt;/h3&gt;
&lt;p&gt;最近，GCNs被引入到基于骨架的动作识别中，并取得了最先进的性能。这些方法大多侧重于图拓扑的设计/学习。Yan等人首先引入GCNs对骨架数据进行建模，并构建了具有固定拓扑约束的预定义图。Shi等人提出通过参数化图来学习自适应图，然后使用卷积参数联合更新图。Gao等人引入了图的更大感受野的高阶近似，并通过解决稀疏回归问题来学习它。Peng等人试图通过NAS搜索不同层的不同图形。&lt;/p&gt;
&lt;h3 id=&#34;backbone-convolutional-neural-networks&#34;&gt;Backbone Convolutional Neural Networks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GoogLeNet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gt0h7zh4lij30lz0bjmxy.jpg&#34; alt=&#34;image-20210731215800024&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ResNet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gt0h9b1csfj30hc06bt8u.jpg&#34; alt=&#34;image-20210731215915147&#34; style=&#34;zoom:70%;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DenseNet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gt0k0envikj30d709vwf7.jpg&#34; alt=&#34;image-20210731233427289&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ResNeXT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gt0ijv96ruj30bs070q3f.jpg&#34; alt=&#34;image-20210731224358000&#34; style=&#34;zoom:70%;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LocalCNN&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;graph-convolutional-networks&#34;&gt;Graph Convolutional Networks&lt;/h3&gt;
&lt;p&gt;GCN广泛用于不规则数据，例如社交网络和生物数据。关键的挑战是定义图上的卷积，这很困难，因为图数据是无序的。GCN的构建主要空间视角或谱域视角。空间方法直接对图形顶点及其邻域执行卷积，然后根据手动设计的规则对输出进行规格化。谱域GCN通过图拉普拉斯方法将图形信号转换到谱域，然后在谱域上应用滤波器。&lt;/p&gt;
&lt;h2 id=&#34;approach&#34;&gt;APPROACH&lt;/h2&gt;
&lt;h3 id=&#34;motivation&#34;&gt;Motivation&lt;/h3&gt;
&lt;p&gt;现有方法的主干网络在从不同层次的不同路径提取和合成不同尺度和变换信息方面具有内在的局限性。&lt;/p&gt;
&lt;h3 id=&#34;instantiation&#34;&gt;Instantiation&lt;/h3&gt;
&lt;p&gt;定义无向图$\mathcal{G}={\mathcal{V},\mathcal{E},A}$&lt;/p&gt;
&lt;p&gt;切比雪夫图卷积定义如下：
$$
F_{\text {out }}=\sum_{r=0}^{R} \theta_{r}^{\prime} T_{r}(\hat{L}) F_{\text {in }},
$$&lt;/p&gt;
&lt;p&gt;$$
T_{r}(\hat{L})=2 \hat{L} T_{r-1}(\hat{L})-T_{r-2}(\hat{L}^{\prime})
$$&lt;/p&gt;
&lt;h4 id=&#34;spatial-inception&#34;&gt;Spatial Inception&lt;/h4&gt;
&lt;p&gt;每个Inception路径有三个部分：采样、卷积和融合。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Adjacency Sampling&lt;/p&gt;
&lt;p&gt;受图卷积的谱公式的启发，我们将特征采样模块重新表示为骨架表示和定义为切比雪夫多项式的图变换之间的矩阵乘法运算。
$$
T_{0}=I
$$&lt;/p&gt;
&lt;p&gt;$$
T_{1}=\hat{L}
$$&lt;/p&gt;
&lt;p&gt;$$
T_{2}=2 \hat{L}^{2}-I
$$&lt;/p&gt;
&lt;p&gt;$$
T_{3}=4 \hat{L}^{3}-3 \hat{L}
$$&lt;/p&gt;
&lt;p&gt;$$
T_{4}=8 \hat{L}^{4}-8 \hat{L}^{2}+I
$$&lt;/p&gt;
&lt;p&gt;借鉴自适应图拓扑方法，我们将层相关偏差和数据相关偏差应用于转换矩阵，以实现更灵活的跳连接。除自适应偏差外，预定义变换矩阵的其他参数在训练期间是固定的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convolution Module&lt;/p&gt;
&lt;p&gt;图卷积模块用于提取各个尺度的图特征。它由1×1卷积层、批量归一化层和ReLU层组成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fusion Module&lt;/p&gt;
&lt;p&gt;引入特征融合模块，通过综合所有路径的输出，生成更具鲁棒性和区分性的表示。在本文中，特征融合模块形成为所有输出的级联层，然后是具有批量归一化和ReLU的1×1卷积层。将1×1卷积层的输出通道数设置为输入通道数，以保持基数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;temporal-inception&#34;&gt;Temporal Inception&lt;/h4&gt;
&lt;p&gt;一个分支直接将连续帧中相同关节的特征作为位置特征处理的输入。另一个分支将输入到运动采样模块以进行运动特征处理。这是首次将关节的运动特征用于基于骨架的动作识别。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Motion Sampling&lt;/p&gt;
&lt;p&gt;在本文中，我们设计了一个运动采样模块来显式地建模二阶时间信息，称为运动信息。特别地，运动信息被定义为连续帧之间的差。&lt;/p&gt;
&lt;p&gt;运动信息也可以看作是骨架序列的光流。骨架数据的关节类似于RGB视频中观察到的对象，光流计算为连续帧之间对象的相对运动。因此，利用上述运动采样操作进行运动特征处理是自然的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convolution and Fusion&lt;/p&gt;
&lt;p&gt;我们使用3×1核进行时间卷积，其中核大小3对应于时间跨度，在输入序列中的相邻特征映射上构造时间连接。特征融合模块将两个时间分支的输出连接起来，然后进行1×1卷积、批量归一化和ReLU。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;spatio-temporal-fusion&#34;&gt;Spatio-Temporal Fusion&lt;/h4&gt;
&lt;p&gt;在最后的合并阶段，空间路径、时间路径和残差路径的输出通过求和进行聚合。&lt;/p&gt;
&lt;h3 id=&#34;network-architecture&#34;&gt;Network Architecture&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gt0iwuoxcej30lo04rmxt.jpg&#34; alt=&#34;image-20210731225634147&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gt0izi345jj30ap0c975c.jpg&#34; alt=&#34;image-20210731225900841&#34; style=&#34;zoom:90%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;experiments&#34;&gt;EXPERIMENTS&lt;/h2&gt;
&lt;h3 id=&#34;datasets-and-evaluation-protocol&#34;&gt;Datasets and Evaluation Protocol&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;NTU RGB+D&lt;/li&gt;
&lt;li&gt;Kinetics-Skeleton&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;implementation-details&#34;&gt;Implementation Details&lt;/h3&gt;
&lt;p&gt;我们的框架是在PyTorch上实现的。所有实验都使用Nesterov动量为0.9的随机梯度下降。对于NTU RGB+D，批量大小为64，权重衰减为5e−4，初始学习率为0.1。在第30和40个Epoch，学习率除以10。训练过程在第50个Epoch结束。对于KineticsSkeleton，批量大小为128，Epoch为60。学习率在开始时设置为0.1，在第45和第50个时期除以10，权重衰减为1.5e−4。&lt;/p&gt;
&lt;h3 id=&#34;comparison-with-state-of-the-art-methods&#34;&gt;Comparison with State-of-the-Art Methods&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gt0j7mcj9hj30at0bxgme.jpg&#34; alt=&#34;image-20210731230654325&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gt0j81r3xvj30az06rdg6.jpg&#34; alt=&#34;image-20210731230719875&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;ablation-analysis&#34;&gt;Ablation Analysis&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gt0j9x4jz6j30lr05eaah.jpg&#34; alt=&#34;image-20210731230908425&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;CONCLUSION&lt;/h2&gt;
&lt;p&gt;在本文中，我们提出了一种简单的图卷积主干结构，称为时空Inception图卷积网络，用于基于骨架的动作识别。它克服了以往方法从不同层次的不同路径中提取和合成不同尺度和变换信息的局限性。在两个大规模数据集上，所提出的网络比最先进的方法有显著的优势，参数和FLOPs更少。我们的方法表明，增加变换集的数量比简单地创建更宽的GCN更有效地获得精度。我们希望这一见解将有助于基于GCN的主干网在时空序列分析中的迭代。在未来，我们将探索更多类型的转换来设计图卷积构建块。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>细粒度城市流量预测</title>
      <link>https://gengdd.github.io/post/%E7%BB%86%E7%B2%92%E5%BA%A6%E5%9F%8E%E5%B8%82%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/</link>
      <pubDate>Fri, 23 Jul 2021 23:02:53 +0800</pubDate>
      <guid>https://gengdd.github.io/post/%E7%BB%86%E7%B2%92%E5%BA%A6%E5%9F%8E%E5%B8%82%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/</guid>
      <description>&lt;center&gt;&lt;div style=&#34;font-family:华文楷体;font-size:30pt&#34;&gt;细粒度城市流量预测&lt;/div&gt;&lt;/center&gt;
&lt;div&gt;
&lt;div style=&#34;width:60px;float:left; font-family:方正公文黑体;&#34;&gt;摘要:&lt;/div&gt; 
&lt;div style=&#34;overflow:hidden; font-family:华文楷体;&#34;&gt;城市流量预测对智慧城市在交通管理和风险评估等方面有很大的帮助。我们将城市流量预测由粗粒度扩展到细粒度，提出了以下具体的挑战：(1)细粒度数据中观测网格间的转移至关重要，这使得在全域范围内捕获网格单元之间的空间依赖性变得更加复杂(2)在大量独立网格单元中学习外部因素的影响具有挑战。我们提出了一个时空关系网络(Spatio-Temporal Relation Network，STRN)来预测细粒度的城市流量。首先，使用骨干网络来学习每个单元格的高层次表示。其次，我们提出了一个全局关系模块(Global Relation Module，GloNet)，与现有方法相比，该模块可以更有效地捕获全局空间依赖关系。第三，我们设计了一个元学习器，将外部因素和土地功能(如POI密度)作为输入以处理元知识并提高模型性能。&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;introduction&#34;&gt;INTRODUCTION&lt;/h2&gt;
&lt;p&gt;在基于网格的城市流量预测中，必须考虑的一个关键属性是时空(ST)相关性：网格单元的未来状态取决于自身和邻居的历史状态。此外，城市流量也受到天气条件和事件等外部因素的影响。例如，大雪可以大大减少许多地区的交通流量。许多现有的研究使用卷积神经网络(CNNs)作为骨干结构来提取空间上的近距离依赖关系；时间依赖关系(例如，最近的、每天的和每周的级别)是使用不同的子分支来捕获的。同时，通过一些人工设计的子网对外部因素的影响进行编码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsf4yn598oj30lu0a046e.jpg&#34; alt=&#34;image-20210713105637603&#34; style=&#34;zoom:45%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对于特定的城市，增加粒度(例如:600m→150m)相当于获得更高的分辨率(如32×32→128×128)。因此，我们可以交替使用“高分辨率”和“细粒度”。尽管之前的研究在粗粒度级别(如32×32)上取得了很好的结果，但由于以下具体挑战，他们的架构并不适合预测细粒度的城市流量:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全局空间依赖性
&lt;ol&gt;
&lt;li&gt;CNN多层堆叠&lt;/li&gt;
&lt;li&gt;膨胀卷积&lt;/li&gt;
&lt;li&gt;DeepSTN+：显式建模所有成对关系网格网格，引入大量参数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;外部因素与土地功能
&lt;ol&gt;
&lt;li&gt;之前的研究如DeepST和ST-ResNet使用子网将外部因素的影响映射到每个网格单元上，这种方法扩展到细粒度将增大大量参数&lt;/li&gt;
&lt;li&gt;使用外部因素只学习不同类型POI特征的权重，而忽略了外部因素对不同网格单元的影响存在显著差异&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们提出了一个用于细粒度城市流预测的时空关系网络(STRN)，STRN遵循CPT范式对三种时间依赖进行建模，并使用基于CNN的主干来提取高层ST特征。为了解决上述挑战，我们设计了如下两个具体模块：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;引入一个新的结构(GloNet)来捕获全局空间依赖性
&lt;ol&gt;
&lt;li&gt;在更高级的语义层(即区域层)上执行关系推断，该语义层对捕获全局关系更友好&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;提出了一种基于矩阵分解的元学习器来应用随时变化的外部因素响应&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsf7r9kwqzj30n40c076o.jpg&#34; alt=&#34;image-20210713123338325&#34; style=&#34;zoom:40%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;formulation&#34;&gt;FORMULATION&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;网格单元$N=H\times W$&lt;/p&gt;
&lt;p&gt;将感兴趣的区域（例如一个城市地区）均匀地划分为一个$H\times W$栅格，栅格中共有$HW$个网格单元&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;城市流量$X_t \in \mathbb{R}^{K\times H \times W}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;区域(Region)$B\in \mathbb{R}^{N\times M}$&lt;/p&gt;
&lt;p&gt;土地使用和功能赋予不规则区域以不同的地理语义。与基于网格的方法相比，它为我们提供了更自然和语义上的城市空间分割。$B\in \mathbb{R}^{N\times M}$表示分配规则，其中每个元素$b_{ij}$代表是网格单元$i$属于区域$j$的可能性，而M是区域数量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外部因素(天气)$e_t \in \mathbb{R}^{l_e}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;土地特征$P\in \mathbb{R}^{l_f\times H\times W}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsf84jc082j60mm0a244n02.jpg&#34; alt=&#34;image-20210713124622097&#34; style=&#34;zoom:40%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;methodology&#34;&gt;METHODOLOGY&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsf9qn9ga0j319c0dy11g.jpg&#34; alt=&#34;image-20210713134220630&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsfcs95lkrj30mq072q3v.jpg&#34; alt=&#34;image-20210713152655526&#34; style=&#34;zoom:40%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;backbone-network&#34;&gt;Backbone Network&lt;/h3&gt;
&lt;p&gt;我们采用了SENet(Squeeze-and-Excitation Network, SENet)来融合每一层小的(即局部的)接受域内的空间和通道信息，该方法已经被证明能够有效地产生每个网格单元的特征。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsfa2gr3hbj30mk0gk40k.jpg&#34; alt=&#34;image-20210713135335131&#34; style=&#34;zoom:40%;&#34; /&gt;
$$
z_c=F_{sq}(u_c)=\frac{1}{W\times H}\sum _{i=1}^{W}\sum _{j=1}^Hu_c(i,j)
$$&lt;/p&gt;
&lt;p&gt;$$
s=F_{ex}(z,W)=\sigma (W_2\delta(W_1z))
$$&lt;/p&gt;
&lt;p&gt;$$
\tilde{x_{c}}=F_{scale}(u_c, s_c)=s_c \cdot u_c
$$&lt;/p&gt;
&lt;h3 id=&#34;global-relation-module&#34;&gt;Global Relation Module&lt;/h3&gt;
&lt;p&gt;提取完网格单元的局部特征后，本文提出了一个全局关系模块，相比现有方法能更高效地捕获全局空间关系。受图像关系推理网络的启发，提出在更高的语义级别（即区域级别）执行关系推理。该语义级别更易于捕获全局关系。此外，基于最小割（Minimum Cut）理论为区域划分设计了无监督损失。&lt;/p&gt;
&lt;p&gt;全局关系网络的整个流程包括四个主要阶段：区域划分，空间转换，消息传递（关系推断），反空间转换和预测。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsfacvq55rj319a0a00vf.jpg&#34; alt=&#34;image-20210713140344902&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;region-partition&#34;&gt;Region Partition&lt;/h4&gt;
&lt;p&gt;简单通过线性变换不能保证相邻网格单元在分割当中的临近性。为此，使用最小割理论去约束分配矩阵的生成。
$$
B=\text{softmax}(\delta(X^h)), X^h\in \mathbb{R}^{N\times C}\quad B\in \mathbb{R}^{N\times M}
$$&lt;/p&gt;
&lt;p&gt;$$
\mathcal{L}_c = -\frac{\text{Tr}(\mathbf{B}^T\tilde{\mathbf{A}}^g\mathbf{B})}{\text{Tr}(\mathbf{B}^T\tilde{\mathbf{D}}^g\mathbf{B})}
$$&lt;/p&gt;
&lt;p&gt;$$
a = \frac{\mathbf{B}^{T} \mathbf{B}}{\left|\mathbf{B}^{T} \mathbf{B}\right|_{F}}
$$&lt;/p&gt;
&lt;p&gt;$$
b = \frac{\mathbf{I}_{M}}{\sqrt{M}}
$$&lt;/p&gt;
&lt;p&gt;$$
\mathcal{L}_m = -\mathcal{L}_c+||a-b||_F
$$&lt;/p&gt;
&lt;p&gt;$\mathbf{\hat{B}}$ assigns exactly $N/M$ grid cells to each region&lt;/p&gt;
&lt;h4 id=&#34;space-conversion&#34;&gt;Space Conversion&lt;/h4&gt;
&lt;p&gt;根据分配矩阵B，将局部网格单元特征聚合到区域空间中以获得区域特征，并生成区域间的连接关系（即区域网络的邻接矩阵）。
$$
H = B^T\phi(X^h), A^r = B^T\tilde{A}^gB, A\in\mathbb{R}^{N\times N}
$$&lt;/p&gt;
&lt;h4 id=&#34;message-passing-between-regions&#34;&gt;Message Passing between Regions&lt;/h4&gt;
&lt;p&gt;由于区域以图的形式连接，因此利用图卷积网络在区域级别执行消息传递，来进行全局关系的建模。
$$
\hat{A}^r = A_r - \text{diag}(A^r),\tilde{A}^r = \hat{D}^{-\frac{1}{2}}\hat{A}^r\hat{D}^{-\frac{1}{2}}
$$&lt;/p&gt;
&lt;p&gt;$$
H^{&#39;}=f_{\text{GCN}}(\tilde{A}^r,H)=\tilde{A}^r\text{ReLU}(\tilde{A}^rHW_1)W_2
$$&lt;/p&gt;
&lt;h4 id=&#34;reverse-projection&#34;&gt;Reverse projection&lt;/h4&gt;
&lt;p&gt;当得到全局关系建模后的高阶区域特征后，根据分配矩阵B进行反投影到原网格空间，得到全局关系增强的网格单元特征。最后，把该全局关系增强的网格单元特征输入到预测器进行预测。
$$
X^g=B\theta(H^{&#39;}) \in \mathbb{R}^{N\times C}
$$&lt;/p&gt;
&lt;h4 id=&#34;reshape--predict&#34;&gt;Reshape &amp;amp; Predict&lt;/h4&gt;
&lt;p&gt;首先Reshape成$\mathbb{R}^{C\times H\times W}$，然后使用$1\times 1$卷积到$\mathbb{R}^{K\times H\times W}$做残差连接&lt;/p&gt;
&lt;h3 id=&#34;meta-learner&#34;&gt;Meta Learner&lt;/h3&gt;
&lt;p&gt;通常，具有相似地块功能的网格单元将对外部因素具有相似的响应。基于此观察，本文设计了一种新颖的元学习器，以基于矩阵分解对外部因素产生特定于网格单元的影响。给定地块特征和外部特征，目标是计算每一个网格的响应。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsfc0owl23j30no09wgnp.jpg&#34; alt=&#34;image-20210713150103560&#34; style=&#34;zoom:50%;&#34; /&gt;
$$
O^m = f_{\text{ML}}(P, e_t) \in \mathbb{R}^{D\times H\times W}
$$&lt;/p&gt;
&lt;h3 id=&#34;optimization&#34;&gt;Optimization&lt;/h3&gt;
&lt;p&gt;$$
\mathcal{L}=\mathcal{L}_{MAE} + \alpha \mathcal{L}_m
$$&lt;/p&gt;
&lt;h2 id=&#34;evaluation&#34;&gt;EVALUATION&lt;/h2&gt;
&lt;h3 id=&#34;论文使用的数据集&#34;&gt;论文使用的数据集&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/20/YeDo36xUQ5cHvqp.png&#34; alt=&#34;image-20210720100740572&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;实验结果&#34;&gt;实验结果&lt;/h3&gt;
&lt;p&gt;不同方法在Taxi BJ数据集上的实验效果对比：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsfcibndtfj30na0gsn0d.jpg&#34; alt=&#34;image-20210713151801457&#34; style=&#34;zoom:40%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsfclkuj85j319i0ek0xi.jpg&#34; alt=&#34;image-20210713152111431&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;论文在此还实验分析了Backbone Network、GloNet、元学习器的有效性在此不再赘述。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/20/XjbCniMgs69rDpu.png&#34; alt=&#34;image-20210720100851086&#34; style=&#34;zoom: 80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/20/8thuUoEFTpgy1re.png&#34; alt=&#34;image-20210720100939096&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;面向智慧城市建设中精细化管理需求，本文提出一种时空关系网络来解决细粒度城市流量预测问题，对于城市的交通规划、公共安全、社会治理都有着非常重要的作用和意义。针对研究问题的两大挑战，本文方法构建了全局关系网络和一种轻量元学习网络，实现对空间（局部和全局）、时间依赖关系以及外部关系（例如天气和兴趣点）的高效学习，并在两个现实世界的细粒度数据集上进行实验，验证了所提方法的有效性。与现有方法相比，本文所提方法可以提供高分辨率流量预测数据，同时模型参数量不受流量粒度变化影响，避免了参数爆炸问题。因此该方法便于移动部署，拥有广泛的应用价值。考虑到落地应用中的实时监测预警需求，未来研究工作中，我们尝试将其扩展至在线学习框架中，进一步提升其应用价值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考文献&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] Liang Y, Ouyang K, Sun J, et al. Fine-Grained Urban Flow Prediction[C]//Proceedings of the Web Conference 2021. 2021: 1833-1845.&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&#34;https://blog.csdn.net/zuiyishihefang/article/details/114958537&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WWW2021论文速递：细粒度城市流量预测&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] &lt;a href=&#34;https://zhuanlan.zhihu.com/p/368740161&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WWW2021：细粒度城市流量预测&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] &lt;a href=&#34;https://zhuanlan.zhihu.com/p/65459972&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;﻿最后一届ImageNet冠军模型：SENet&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>轨迹数据挖掘:概述</title>
      <link>https://gengdd.github.io/post/%E8%BD%A8%E8%BF%B9%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Thu, 22 Jul 2021 23:39:49 +0800</pubDate>
      <guid>https://gengdd.github.io/post/%E8%BD%A8%E8%BF%B9%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%A6%82%E8%BF%B0/</guid>
      <description>&lt;h2 id=&#34;轨迹数据挖掘范式&#34;&gt;轨迹数据挖掘范式&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq4yeellrj30s20mwn1g.jpg&#34; alt=&#34;image-20210707184333618&#34; style=&#34;zoom:35%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;轨迹数据&#34;&gt;轨迹数据&lt;/h2&gt;
&lt;p&gt;分类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人的移动
&lt;ul&gt;
&lt;li&gt;主动记录&lt;/li&gt;
&lt;li&gt;被动记录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;运输车辆的移动：资源分配、交通分析、交通网络改善&lt;/li&gt;
&lt;li&gt;动物的移动&lt;/li&gt;
&lt;li&gt;自然现象的移动&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;轨迹数据处理&#34;&gt;轨迹数据处理&lt;/h2&gt;
&lt;h3 id=&#34;噪声滤波&#34;&gt;噪声滤波&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;均值(中位数)滤波
&lt;ul&gt;
&lt;li&gt;在处理极端误差时，中值滤波比均值滤波具有更强的鲁棒性&lt;/li&gt;
&lt;li&gt;当处理多个连续噪声点时，需要更大尺寸的滑动窗口&lt;/li&gt;
&lt;li&gt;当轨迹采样率很低时，均值滤波器和中值滤波器不再是很好的选择&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;卡尔曼(粒子)滤波
&lt;ul&gt;
&lt;li&gt;卡尔曼滤波器通过假设线性模型加上高斯噪声来提高效率，而粒子滤波器则放宽了这些假设&lt;/li&gt;
&lt;li&gt;如果轨迹上的第一个点是有噪声的，两个滤波器的有效性显著下降&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于启发式的异常点检测
&lt;ul&gt;
&lt;li&gt;通过使用离群点检测算法直接从轨迹中去除噪声点&lt;/li&gt;
&lt;li&gt;基于距离的异常检测&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq4ykou8yj30ik08uwew.jpg&#34; alt=&#34;image-20210707194302669&#34; style=&#34;zoom:30%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;驻留点检测&#34;&gt;驻留点检测&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq4ymhuo0j30qi09a75h.jpg&#34; alt=&#34;image-20210707194622759&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单点位置
&lt;ul&gt;
&lt;li&gt;这种情况是非常罕见的，因为用户的定位设备通常产生不同的读数，即使在同一位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;人们走动，或保持静止但定位读数会四处移动&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;文献：&lt;/p&gt;
&lt;p&gt;[1] Mining user similarity based on location history&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;轨迹压缩&#34;&gt;轨迹压缩&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;离线压缩(即批处理模式):通过从原始轨迹中剔除一些误差可以忽略的点来生成近似轨迹
&lt;ul&gt;
&lt;li&gt;Douglas-Peucke($N^2$)&lt;/li&gt;
&lt;li&gt;($N\log N$)(Speeding up the Douglas-Peucker line simplification algorithm)&lt;/li&gt;
&lt;li&gt;Bellman’s algorithm($N^3$)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在线压缩:即在物体运动时立即压缩轨迹
&lt;ul&gt;
&lt;li&gt;基于窗口的算法
&lt;ul&gt;
&lt;li&gt;Sliding Window Algorithm&lt;/li&gt;
&lt;li&gt;Open Window Algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于移动物体的速度和方向&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq4yph24fj30wm0im0vp.jpg&#34; alt=&#34;image-20210707200654592&#34; style=&#34;zoom:30%;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;轨迹语义压缩
&lt;ul&gt;
&lt;li&gt;Trajectory Simplification (TS) algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考虑受交通网络约束的轨迹压缩
&lt;ul&gt;
&lt;li&gt;PRESS(PRESS: A novel framework of trajectory compression in roadnetworks)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两个距离度量度量压缩的误差：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;垂直欧式距离&lt;/li&gt;
&lt;li&gt;时间同步欧式距离&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;轨迹分割&#34;&gt;轨迹分割&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;基于时间间隔&lt;/li&gt;
&lt;li&gt;基于轨迹的形状
&lt;ul&gt;
&lt;li&gt;Minimal Description Language (MDL)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于轨迹中点的语义意义
&lt;ul&gt;
&lt;li&gt;将轨迹划分为不同运输方式的分段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq4yslomej30me0bkt9z.jpg&#34; alt=&#34;image-20210707204634976&#34; style=&#34;zoom:35%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq4yvez0sj30ls0futa6.jpg&#34; alt=&#34;image-20210707214507726&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;地图匹配&#34;&gt;地图匹配&lt;/h3&gt;
&lt;p&gt;根据所使用的附加信息，地图匹配算法可以分为四类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;几何
&lt;ul&gt;
&lt;li&gt;几何地图匹配算法考虑道路网络中单个链接的形状，例如，匹配GPS点到最近的道路&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拓扑
&lt;ul&gt;
&lt;li&gt;利用Frechet距离测量GPS序列与候选道路序列之间的拟合(On map-matching vehicle tracking data)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;概率
&lt;ul&gt;
&lt;li&gt;为了处理噪声和低采样率的轨迹，概率算法考虑通过路网的多种可能路径，以找到最佳路径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他
&lt;ul&gt;
&lt;li&gt;Map-matching for low-sampling-rate GPS trajectories&lt;/li&gt;
&lt;li&gt;Hidden Markov map matching through noise and sparseness&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据所考虑的采样点范围，地图匹配算法可以分为两类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;局部/增量
&lt;ul&gt;
&lt;li&gt;运行非常有效，经常采用在线应用程序&lt;/li&gt;
&lt;li&gt;当轨迹采样率较低时，匹配精度会降低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全局
&lt;ul&gt;
&lt;li&gt;将整个轨迹与路网匹配&lt;/li&gt;
&lt;li&gt;比局部方法更精确，但效率较低，通常用于离线任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq4yzpyxoj30u20dawgm.jpg&#34; alt=&#34;image-20210707222408105&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;轨迹数据管理&#34;&gt;轨迹数据管理&lt;/h2&gt;
&lt;h3 id=&#34;轨迹索引与检索&#34;&gt;轨迹索引与检索&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;文献：&lt;/p&gt;
&lt;p&gt;[1]  Trajectory indexing and retrieval&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;K近邻(点/轨迹)查询
&lt;ul&gt;
&lt;li&gt;查询点的数量通常非常小，并且在应用程序中可能彼此很远&lt;/li&gt;
&lt;li&gt;检索穿过特定路径的车辆轨迹
&lt;ul&gt;
&lt;li&gt;将路网中的路径视为轨迹，利用KNN轨迹查询来检测与路径接近的轨迹&lt;/li&gt;
&lt;li&gt;利用地图匹配算法将轨迹转换为一系列路段，建立一些索引结构来管理路径和通过它们的轨迹之间的关系
&lt;ul&gt;
&lt;li&gt;suffix-tree-based索引结构&lt;/li&gt;
&lt;li&gt;由于索引的规模随着轨迹数量的增加而迅速增长，只适合管理近期生成的轨迹&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq4z3isxhj30t00d8dhv.jpg&#34; alt=&#34;image-20210708093017691&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;范围查询
&lt;ul&gt;
&lt;li&gt;基于轨迹构建3D-Rtree(ST-R-tree和TB-tree)&lt;/li&gt;
&lt;li&gt;随着时间的推移，不同的3D box之间的重叠仍然在不断增加&lt;/li&gt;
&lt;li&gt;将一个时间段划分为多个时间间隔，为每个时间间隔产生的轨迹建立一个单独的空间索引，如R树
&lt;ul&gt;
&lt;li&gt;Rt-Tree&lt;/li&gt;
&lt;li&gt;HR-Tree&lt;/li&gt;
&lt;li&gt;H+R-Tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将地理空间划分为网格，然后为每个网格中的轨迹建立时序索引
&lt;ul&gt;
&lt;li&gt;CSE-Tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq4z7lgp3j30se09g400.jpg&#34; alt=&#34;image-20210708085148384&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq4ze3y5nj30p209qdh2.jpg&#34; alt=&#34;image-20210708085403452&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;轨迹距离相似性&#34;&gt;轨迹距离/相似性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;点和轨迹的距离
&lt;ul&gt;
&lt;li&gt;$D(q,A)=\min _{p\in A}D(p,q)$&lt;/li&gt;
&lt;li&gt;$D(Q,A)=\sum _{q\in Q}e^{D(q,A)}$, $S(Q,A)=\sum _{q\in Q}e^{-D(q,A)}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;轨迹和轨迹的距离
&lt;ul&gt;
&lt;li&gt;Closest-pair distance
&lt;ul&gt;
&lt;li&gt;$CPD(A,B)=\min _{p\in A, p^{&#39;}\in B}D(p,p^{&#39;})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sum-of-pairs distance
&lt;ul&gt;
&lt;li&gt;$SPD(A,B)=\sum _{i=1}^nD(p_i,p_i^{&#39;})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dynamic Time Wrapping (DTW) distance&lt;/li&gt;
&lt;li&gt;Longest Common Subsequence(LCSS) LCSS-based distance&lt;/li&gt;
&lt;li&gt;Edit Distance on Real Sequence(EDR) distance&lt;/li&gt;
&lt;li&gt;K-BCT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;轨迹段的距离
&lt;ul&gt;
&lt;li&gt;基于轨迹段的最小边界矩形(MBR)&lt;/li&gt;
&lt;li&gt;Trajectory-Hausdorff Distance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq4zh0ryij30no08s75c.jpg&#34; alt=&#34;image-20210708100952520&#34; style=&#34;zoom:35%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;轨迹中的不确定性&#34;&gt;轨迹中的不确定性&lt;/h2&gt;
&lt;h3 id=&#34;减少轨迹数据的不确定性&#34;&gt;减少轨迹数据的不确定性&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq4zjuteyj30r20amgn2.jpg&#34; alt=&#34;image-20210708101904433&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modeling Uncertainty of a Trajectory for Queries&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Path Inference from Uncertain Trajectories&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;为路网中产生的轨迹而设计的&lt;/li&gt;
&lt;li&gt;自由空间，移动的物体(如飞翔的小鸟或爬山的人)不会跟随道路网络中的路径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq4znanbcj30ug0ayq4w.jpg&#34; alt=&#34;image-20210708104022077&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文献:&lt;/p&gt;
&lt;p&gt;[1] Constructing popular routes from uncertain trajectories&lt;/p&gt;
&lt;p&gt;[2] Calibrating trajectory data for similarity-based analysis&lt;/p&gt;
&lt;p&gt;[3] Reducing Uncertainty of Low-Sampling-Rate Trajectories&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;轨迹数据的隐私&#34;&gt;轨迹数据的隐私&lt;/h3&gt;
&lt;p&gt;有两种主要场景，我们需要保护用户的轨迹数据免受隐私泄漏：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实时连续定位服务&lt;/li&gt;
&lt;li&gt;历史轨迹的公开&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;文献：&lt;/p&gt;
&lt;p&gt;[1] Privacy of spatial trajectories&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;轨迹模式挖掘&#34;&gt;轨迹模式挖掘&lt;/h2&gt;
&lt;h3 id=&#34;共同移动模式&#34;&gt;共同移动模式&lt;/h3&gt;
&lt;p&gt;Flock(convoy), swarm, traveling companion, gathering&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The traveling companion patterns can be regarded as an online (and incremental) detection fashion of convoy and swarm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq4zqvzsqj30su0ecabq.jpg&#34; alt=&#34;image-20210708113022311&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;轨迹聚类&#34;&gt;轨迹聚类&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;回归混合模型和期望最大化(EM)算法&lt;/li&gt;
&lt;li&gt;轨迹分段，利用Trajectory-Hausdorff Distance构建轨迹段聚类&lt;/li&gt;
&lt;li&gt;增量聚类算法&lt;/li&gt;
&lt;li&gt;Micro-and-Macroclustering framework&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq4zx071cj30ta0a240e.jpg&#34; alt=&#34;image-20210708123750956&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;序列模式&#34;&gt;序列模式&lt;/h3&gt;
&lt;p&gt;Sequential Patterns是指一定数量的移动物体在相似的时间间隔内沿着公共序列的位置移动&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq4zxtbbmj30j2022jre.jpg&#34; alt=&#34;image-20210708134241039&#34; style=&#34;zoom:40%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;共同序列$l_1\rightarrow l_2\rightarrow l_4$&lt;/p&gt;
&lt;p&gt;为了从轨迹中检测序列模式，我们首先需要定义序列中的一个(公共)位置。然而，在许多GPS轨迹中，每个点都具有一对GPS坐标的特征，这些坐标不会在每个模式实例中完全重复&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sequential Pattern Mining in a Free Space
&lt;ul&gt;
&lt;li&gt;Line-Simplification-Based Methods&lt;/li&gt;
&lt;li&gt;Clustering-Based Methods
&lt;ul&gt;
&lt;li&gt;检测驻留点作为聚类点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sequential Pattern Mining in a Road Network&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;文献：&lt;/p&gt;
&lt;p&gt;[1] PRESS: A novel framework of trajectory compression in roadnetworks&lt;/p&gt;
&lt;p&gt;[2] Travel time estimation of a path using sparse trajectories.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;周期模式&#34;&gt;周期模式&lt;/h3&gt;
&lt;p&gt;两阶段检测方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用KDE等基于密度的聚类算法来检测运动目标经常访问的参考点&lt;/li&gt;
&lt;li&gt;通过使用分层聚类算法总结部分移动序列的周期性行为&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;轨迹分类&#34;&gt;轨迹分类&lt;/h2&gt;
&lt;p&gt;交通方式分类：驾车、自行车、步行、公交车&lt;/p&gt;
&lt;p&gt;三个主要步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用分割方法将轨迹分割成若干段&lt;/li&gt;
&lt;li&gt;从每个片段中提取特征&lt;/li&gt;
&lt;li&gt;构建模型以对每个段（或点）进行分类&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于轨迹本质上是一个序列，我们可以利用现有的序列推理模型，如动态贝叶斯网络(DBN)、HMM和条件随机场(CRF)，它们合并了来自局部点(或段)和相邻点(或段)之间的序列模式的信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq502xrv6j30qc0b2dhb.jpg&#34; alt=&#34;image-20210708142709564&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;轨迹数据的异常检测&#34;&gt;轨迹数据的异常检测&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;文献：&lt;/p&gt;
&lt;p&gt;[1] Anomaly detection: A survey&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;检测异常轨迹&#34;&gt;检测异常轨迹&lt;/h3&gt;
&lt;p&gt;利用现有的轨迹聚类或频繁模式挖掘方法，如果一个轨迹(或一个片段)不能容纳在任何(基于密度的)簇中，或不频繁，它可能是一个异常轨迹&lt;/p&gt;
&lt;h3 id=&#34;从轨迹中判别异常事件&#34;&gt;从轨迹中判别异常事件&lt;/h3&gt;
&lt;p&gt;使用多种轨迹检测流量异常(而不是轨迹本身)&lt;/p&gt;
&lt;p&gt;利用轨迹数据补全路网&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文献：&lt;/p&gt;
&lt;p&gt;[1] Crowd sensing of traffic anomalies based on human mobility and social media&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;由轨迹数据到其他表征&#34;&gt;由轨迹数据到其他表征&lt;/h2&gt;
&lt;h3 id=&#34;轨迹到图&#34;&gt;轨迹到图&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;路网情景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;轨迹匹配到路网建立有向图&lt;/li&gt;
&lt;li&gt;A landmark graph&lt;/li&gt;
&lt;li&gt;A region graph&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq506f3o2j30os0cedi4.jpg&#34; alt=&#34;image-20210708145210661&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自由空间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用聚类方法从原始轨迹中识别出关键的顶点位置&lt;/li&gt;
&lt;li&gt;两个顶点连接起来，根据经过两个位置的轨迹形成可路由图&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;出行推荐、从大量的轨迹中找出流行的路线、使用社区发现方法从轨迹中基于图检测社区&lt;/li&gt;
&lt;li&gt;评估用户相似度&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq50a1tf4j30uw0mkdk1.jpg&#34; alt=&#34;image-20210708151326896&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;轨迹到矩阵&#34;&gt;轨迹到矩阵&lt;/h3&gt;
&lt;p&gt;矩阵可以帮助补充缺失值&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Travel Recommendation（CF/MF）&lt;/li&gt;
&lt;li&gt;Traffic Condition Estimation&lt;/li&gt;
&lt;li&gt;Diagnosing Traffic Anomalies&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;轨迹到张量&#34;&gt;轨迹到张量&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;文献：&lt;/p&gt;
&lt;p&gt;[1] Travel Time Estimation of a Path using Sparse Trajectories&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;h3 id=&#34;公开数据集&#34;&gt;公开数据集&lt;/h3&gt;
&lt;h3 id=&#34;会议和期刊&#34;&gt;会议和期刊&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsq50dteboj315s0eeq8s.jpg&#34; alt=&#34;image-20210708161206671&#34; style=&#34;zoom:30%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;未来研究方向&#34;&gt;未来研究方向&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;多源数据融合&lt;/li&gt;
&lt;li&gt;轨迹数据管理&lt;/li&gt;
&lt;li&gt;跨域机器学习&lt;/li&gt;
&lt;li&gt;轨迹可视化&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>新博客试用</title>
      <link>https://gengdd.github.io/post/%E6%96%B0%E5%8D%9A%E5%AE%A2%E8%AF%95%E7%94%A8/</link>
      <pubDate>Fri, 16 Jul 2021 22:34:36 +0800</pubDate>
      <guid>https://gengdd.github.io/post/%E6%96%B0%E5%8D%9A%E5%AE%A2%E8%AF%95%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;公式&#34;&gt;公式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内联公式$\frac{1}{2}+\frac{1}{2} = 1$&lt;/li&gt;
&lt;li&gt;公式块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
\frac{1}{2}+\frac{1}{2}=1
$$&lt;/p&gt;
&lt;h2 id=&#34;图片&#34;&gt;图片&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gsj64c3lgkj31hk0syjuz.jpg&#34; alt=&#34;image-20210716223911416&#34; style=&#34;zoom:25%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;pdf&#34;&gt;PDF&lt;/h2&gt;
&lt;a href=&#34;https://gengdd.github.io/uploads/TIST0603-29%20-%20TrajectoryDataMining-tist-yuzheng_published.pdf&#34; target=&#34;_blank&#34;&gt;轨迹数据挖掘概述&lt;/a&gt;
</description>
    </item>
    
  </channel>
</rss>
